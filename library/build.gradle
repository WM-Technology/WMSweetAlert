apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

def groupIdUsed = GROUP

version = VERSION_NAME
group = groupIdUsed

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 17
    }

    lintOptions {
        abortOnError false
    }
    buildToolsVersion '27.0.3'
}

dependencies {
    implementation 'com.pnikosis:materialish-progress:1.7'
}


/*
install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                groupId groupIdUsed
                artifactId 'library'

                name 'WMSweetAlert'
                description POM_DESCRIPTION
                url 'https://www.wmtechnology.org'

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection 'https://github.com/WM-Technology/WMSweetAlert.git'
                    developerConnection 'https://github.com/WM-Technology/WMSweetAlert.git'
                    url 'https://www.wmtechnology.org'

                }
            }
        }
    }
}
*/
version = '1.0'

if (project.hasProperty("android")) {
    // deploy aar
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else {
    // deploy jars only
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'
/* upload command:
    gradlew -p library clean build uploadArchives --info
 */